/* 
 * Copyright 2016 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.jota.client.ui;

import java.rmi.RemoteException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JSpinner;
import se.trixon.jota.shared.ServerCommander;
import se.trixon.jota.client.Manager;
import se.trixon.jota.client.ClientOptions;
import se.trixon.almond.util.BundleHelper;
import se.trixon.almond.util.Dict;
import se.trixon.almond.util.swing.SwingHelper;

/**
 *
 * @author Patrik Karlsson
 */
public class OptionsPanel extends javax.swing.JPanel {

    private final Manager mManager = Manager.getInstance();
    private final ServerCommander mServerCommander;
    private final ClientOptions mOptions = ClientOptions.INSTANCE;
    private final ResourceBundle mBundle = BundleHelper.getBundle(MainFrame.class, "Bundle");

    /**
     * Creates new form OptionsPanel
     */
    public OptionsPanel() {
        mServerCommander = mManager.getServerCommander();
        initComponents();

        iconsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{mBundle.getString("OptionsPanel.iconThemeBlack"), mBundle.getString("OptionsPanel.iconThemeWhite")}));

        tabbedPane.setEnabledAt(1, mServerCommander != null);
        portSpinner.setEditor(new JSpinner.NumberEditor(portSpinner, "#"));
        connectDelaySpinner.setEditor(new JSpinner.NumberEditor(connectDelaySpinner, "#"));
        load();
    }

    void save() {
        if (mManager.isConnected()) {
            try {
                mServerCommander.setRsyncPath(rsyncFileChooserPanel.getPath());
                mServerCommander.setLogDir(logDirFileChooserPanel.getPath());
            } catch (RemoteException ex) {
                Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        mOptions.setForceLookAndFeel(lafForceCheckBox.isSelected());
        mOptions.setLookAndFeel((String) lafComboBox.getSelectedItem());
        mOptions.setIconTheme(iconsComboBox.getSelectedIndex());
        mOptions.setDisplayMenuIcons(menuIconsCheckBox.isSelected());
        mOptions.setCustomColors(customColorsCheckBox.isSelected());
        mOptions.setAutostartServer(autostartServerCheckBox.isSelected());
        mOptions.setAutostartServerPort((int) portSpinner.getValue());
        mOptions.setAutostartServerConnectDelay((int) connectDelaySpinner.getValue());
    }

    private void load() {
        if (mManager.isConnected()) {
            try {
                rsyncFileChooserPanel.setPath(mServerCommander.getRsyncPath());
                logDirFileChooserPanel.setPath(mServerCommander.getLogDir());
            } catch (NullPointerException | RemoteException ex) {
                rsyncFileChooserPanel.setEnabled(false);
                Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        lafForceCheckBox.setSelected(mOptions.isForceLookAndFeel());
        lafComboBox.setModel(SwingHelper.getLookAndFeelComboBoxModel(true));
        lafComboBox.setSelectedItem(mOptions.getLookAndFeel());
        iconsComboBox.setSelectedIndex(mOptions.getIconTheme());
        lafForceCheckBoxActionPerformed(null);
        menuIconsCheckBox.setSelected(mOptions.isDisplayMenuIcons());
        customColorsCheckBox.setSelected(mOptions.isCustomColors());
        autostartServerCheckBox.setSelected(mOptions.isAutostartServer());
        portSpinner.setValue(mOptions.getAutostartServerPort());
        connectDelaySpinner.setValue(mOptions.getAutostartServerConnectDelay());
        autostartServerCheckBoxActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        clientPanel = new javax.swing.JPanel();
        lafForceCheckBox = new javax.swing.JCheckBox();
        lafLabel = new javax.swing.JLabel();
        lafComboBox = new javax.swing.JComboBox();
        iconsLabel = new javax.swing.JLabel();
        iconsComboBox = new javax.swing.JComboBox<>();
        menuIconsCheckBox = new javax.swing.JCheckBox();
        customColorsCheckBox = new javax.swing.JCheckBox();
        autostartServerCheckBox = new javax.swing.JCheckBox();
        portLabel = new javax.swing.JLabel();
        portSpinner = new javax.swing.JSpinner();
        connectDelayLabel = new javax.swing.JLabel();
        connectDelaySpinner = new javax.swing.JSpinner();
        serverPanel = new javax.swing.JPanel();
        rsyncFileChooserPanel = new se.trixon.almond.util.swing.dialogs.FileChooserPanel();
        logDirFileChooserPanel = new se.trixon.almond.util.swing.dialogs.FileChooserPanel();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("se/trixon/jota/client/ui/Bundle"); // NOI18N
        lafForceCheckBox.setText(bundle.getString("OptionsPanel.lafForceCheckBox.text")); // NOI18N
        lafForceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lafForceCheckBoxActionPerformed(evt);
            }
        });

        lafLabel.setText(Dict.LOOK_AND_FEEL.getString());

        lafComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lafComboBoxActionPerformed(evt);
            }
        });

        iconsLabel.setText(Dict.ICONS.toString());

        menuIconsCheckBox.setText(bundle.getString("OptionsPanel.menuIconsCheckBox.text")); // NOI18N

        customColorsCheckBox.setText(bundle.getString("OptionsPanel.customColorsCheckBox.text")); // NOI18N

        autostartServerCheckBox.setText(bundle.getString("OptionsPanel.autostartServerCheckBox.text")); // NOI18N
        autostartServerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autostartServerCheckBoxActionPerformed(evt);
            }
        });

        portLabel.setText(Dict.PORT.toString());

        portSpinner.setModel(new javax.swing.SpinnerNumberModel(1024, 1024, 65535, 1));

        connectDelayLabel.setText(bundle.getString("OptionsPanel.connectDelayLabel.text")); // NOI18N

        connectDelaySpinner.setModel(new javax.swing.SpinnerNumberModel(500, 100, 3000, 100));

        javax.swing.GroupLayout clientPanelLayout = new javax.swing.GroupLayout(clientPanel);
        clientPanel.setLayout(clientPanelLayout);
        clientPanelLayout.setHorizontalGroup(
            clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lafComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lafForceCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(iconsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(menuIconsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customColorsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(clientPanelLayout.createSequentialGroup()
                        .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lafLabel)
                            .addComponent(iconsLabel)
                            .addGroup(clientPanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(portSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(portLabel))
                                .addGap(18, 18, 18)
                                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(connectDelayLabel)
                                    .addComponent(connectDelaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(autostartServerCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        clientPanelLayout.setVerticalGroup(
            clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lafForceCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lafLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lafComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iconsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iconsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuIconsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customColorsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autostartServerCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(connectDelayLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectDelaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab(Dict.CLIENT.toString(), clientPanel);

        rsyncFileChooserPanel.setHeader(bundle.getString("OptionsPanel.rsyncFileChooserPanel.header")); // NOI18N

        logDirFileChooserPanel.setHeader(Dict.LOG_DIRECTORY.toString());
        logDirFileChooserPanel.setMode(JFileChooser.DIRECTORIES_ONLY);

        javax.swing.GroupLayout serverPanelLayout = new javax.swing.GroupLayout(serverPanel);
        serverPanel.setLayout(serverPanelLayout);
        serverPanelLayout.setHorizontalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rsyncFileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(logDirFileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        serverPanelLayout.setVerticalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rsyncFileChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logDirFileChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab(Dict.SERVER.toString(), serverPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lafForceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lafForceCheckBoxActionPerformed
        lafComboBox.setEnabled(lafForceCheckBox.isSelected());
        lafLabel.setEnabled(lafForceCheckBox.isSelected());
    }//GEN-LAST:event_lafForceCheckBoxActionPerformed

    private void autostartServerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autostartServerCheckBoxActionPerformed
        final boolean autoConnect = autostartServerCheckBox.isSelected();

        portLabel.setEnabled(autoConnect);
        portSpinner.setEnabled(autoConnect);
        connectDelayLabel.setEnabled(autoConnect);
        connectDelaySpinner.setEnabled(autoConnect);
    }//GEN-LAST:event_autostartServerCheckBoxActionPerformed

    private void lafComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lafComboBoxActionPerformed
        int iconIndex = iconsComboBox.getSelectedIndex();
        if (iconIndex < 2) {
            String laf = (String) lafComboBox.getSelectedItem();

            iconIndex = laf.equalsIgnoreCase("darcula") ? 1 : 0;
            iconsComboBox.setSelectedIndex(iconIndex);
        }
    }//GEN-LAST:event_lafComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autostartServerCheckBox;
    private javax.swing.JPanel clientPanel;
    private javax.swing.JLabel connectDelayLabel;
    private javax.swing.JSpinner connectDelaySpinner;
    private javax.swing.JCheckBox customColorsCheckBox;
    private javax.swing.JComboBox<String> iconsComboBox;
    private javax.swing.JLabel iconsLabel;
    private javax.swing.JComboBox lafComboBox;
    private javax.swing.JCheckBox lafForceCheckBox;
    private javax.swing.JLabel lafLabel;
    private se.trixon.almond.util.swing.dialogs.FileChooserPanel logDirFileChooserPanel;
    private javax.swing.JCheckBox menuIconsCheckBox;
    private javax.swing.JLabel portLabel;
    private javax.swing.JSpinner portSpinner;
    private se.trixon.almond.util.swing.dialogs.FileChooserPanel rsyncFileChooserPanel;
    private javax.swing.JPanel serverPanel;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
