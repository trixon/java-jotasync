/* 
 * Copyright 2016 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.jotaclient.ui.editor.task_modules;

import se.trixon.jota.task.Task;
import se.trixon.util.dictionary.Dict;
import java.io.File;
import se.trixon.jota.task.TaskExecuteSection;
import se.trixon.util.swing.dialogs.FileChooserPanel;

/**
 *
 * @author Patrik Karlsson
 */
public class ModuleExecutePanel extends ModulePanel implements FileChooserPanel.FileChooserButtonListener {

    /**
     * Creates new form ModulePanel
     */
    public ModuleExecutePanel() {
        initComponents();
        init();
    }

    @Override
    public void loadTask(Task task) {
        TaskExecuteSection executeSection = task.getExecuteSection();

        runBeforeHaltOnErrorCheckBox.setEnabled(executeSection.isRunBefore());
        runBeforeHaltOnErrorCheckBox.setSelected(executeSection.isRunBeforeHaltOnError());

        runBeforePanel.setSelected(executeSection.isRunBefore());
        runBeforePanel.setPath(executeSection.getRunBeforeCommand());
        runBeforePanel.setEnabled(runBeforePanel.isSelected());

        runAfterFailurePanel.setSelected(executeSection.isRunAfterFailure());
        runAfterFailurePanel.setPath(executeSection.getRunAfterFailureCommand());
        runAfterFailurePanel.setEnabled(runAfterFailurePanel.isSelected());

        runAfterSuccessPanel.setSelected(executeSection.isRunAfterSuccess());
        runAfterSuccessPanel.setPath(executeSection.getRunAfterSuccessCommand());
        runAfterSuccessPanel.setEnabled(runAfterSuccessPanel.isSelected());

        runAfterPanel.setSelected(executeSection.isRunAfter());
        runAfterPanel.setPath(executeSection.getRunAfterCommand());
        runAfterPanel.setEnabled(runAfterPanel.isSelected());
    }

    @Override
    public void onFileChooserCancel(FileChooserPanel fileChooserPanel) {
    }

    @Override
    public void onFileChooserCheckBoxChange(FileChooserPanel fileChooserPanel, boolean isSelected) {
        if (fileChooserPanel == runBeforePanel) {
            runBeforeHaltOnErrorCheckBox.setEnabled(isSelected);
        }
    }

    @Override
    public void onFileChooserDrop(FileChooserPanel fileChooserPanel) {
    }

    @Override
    public void onFileChooserOk(FileChooserPanel fileChooserPanel, File file) {
    }

    @Override
    public void onFileChooserPreSelect(FileChooserPanel fileChooserPanel) {
    }

    @Override
    public Task saveTask(Task task) {
        TaskExecuteSection executeSection = task.getExecuteSection();

        executeSection.setRunBefore(runBeforePanel.isSelected());
        executeSection.setRunBeforeCommand(runBeforePanel.getPath());
        executeSection.setRunBeforeHaltOnError(runBeforeHaltOnErrorCheckBox.isSelected());

        executeSection.setRunAfterFailure(runAfterFailurePanel.isSelected());
        executeSection.setRunAfterFailureCommand(runAfterFailurePanel.getPath());

        executeSection.setRunAfterSuccess(runAfterSuccessPanel.isSelected());
        executeSection.setRunAfterSuccessCommand(runAfterSuccessPanel.getPath());

        executeSection.setRunAfter(runAfterPanel.isSelected());
        executeSection.setRunAfterCommand(runAfterPanel.getPath());

        return task;
    }

    private void init() {
        mTitle = Dict.RUN.getString();

        runBeforePanel.setButtonListener(this);
        runBeforePanel.setEnabled(false);

        runAfterFailurePanel.setEnabled(false);
        runAfterSuccessPanel.setEnabled(false);
        runAfterPanel.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prePostScrollPane = new javax.swing.JScrollPane();
        prePostPanel = new javax.swing.JPanel();
        runBeforePanel = new se.trixon.util.swing.dialogs.FileChooserPanel();
        runBeforeHaltOnErrorCheckBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        runAfterFailurePanel = new se.trixon.util.swing.dialogs.FileChooserPanel();
        runAfterSuccessPanel = new se.trixon.util.swing.dialogs.FileChooserPanel();
        runAfterPanel = new se.trixon.util.swing.dialogs.FileChooserPanel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        prePostPanel.setBorder(null);

        runBeforePanel.setCheckBoxMode(true);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("se/trixon/jotaclient/ui/editor/task_modules/Bundle"); // NOI18N
        runBeforePanel.setHeader(bundle.getString("ModuleExecutePanel.runBefore.text")); // NOI18N

        runBeforeHaltOnErrorCheckBox.setText(bundle.getString("ModuleExecutePanel.runBeforeHaltOnErrorCheckBox.text")); // NOI18N

        runAfterFailurePanel.setCheckBoxMode(true);
        runAfterFailurePanel.setHeader(bundle.getString("ModuleExecutePanel.runAfterFailurePanel.header")); // NOI18N

        runAfterSuccessPanel.setCheckBoxMode(true);
        runAfterSuccessPanel.setHeader(bundle.getString("ModuleExecutePanel.runAfterSuccessPanel.header")); // NOI18N

        runAfterPanel.setCheckBoxMode(true);
        runAfterPanel.setHeader(bundle.getString("ModuleExecutePanel.runAfterPanel.header")); // NOI18N

        javax.swing.GroupLayout prePostPanelLayout = new javax.swing.GroupLayout(prePostPanel);
        prePostPanel.setLayout(prePostPanelLayout);
        prePostPanelLayout.setHorizontalGroup(
            prePostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(runBeforePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
            .addComponent(runAfterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(prePostPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addComponent(runAfterFailurePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(runAfterSuccessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(runBeforeHaltOnErrorCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        prePostPanelLayout.setVerticalGroup(
            prePostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(prePostPanelLayout.createSequentialGroup()
                .addComponent(runBeforePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runBeforeHaltOnErrorCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runAfterFailurePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runAfterSuccessPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runAfterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        prePostScrollPane.setViewportView(prePostPanel);

        add(prePostScrollPane);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel prePostPanel;
    private javax.swing.JScrollPane prePostScrollPane;
    private se.trixon.util.swing.dialogs.FileChooserPanel runAfterFailurePanel;
    private se.trixon.util.swing.dialogs.FileChooserPanel runAfterPanel;
    private se.trixon.util.swing.dialogs.FileChooserPanel runAfterSuccessPanel;
    private javax.swing.JCheckBox runBeforeHaltOnErrorCheckBox;
    private se.trixon.util.swing.dialogs.FileChooserPanel runBeforePanel;
    // End of variables declaration//GEN-END:variables
}
